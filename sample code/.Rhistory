# Bias variance tradeoff illustration
rm(list=ls(all=TRUE))
apple
apple=111
apple
rm(list=ls(all=TRUE))
apple
set.seed(2)
set.seed(2)
n <- 1000
p <- 100
sigma <- .5
betazero <- (1:p)^(-2) #1/2^(1:p)#
plot(betazero)
plot(betazero)
x <- matrix(rnorm(n*p), nrow=n)
x
dim(x)
y <- x %*% betazero + sigma * rnorm(n)
y
y <- x %*% betazero + sigma * rnorm(n) #rnorm's is N(0,1), the second term is the error term
n.test <- 10000
x.test <- matrix(rnorm(n.test*p), nrow=n.test)
y.test <- x.test %*% betazero + sigma * rnorm(n.test)
MSE <- matrix(NA,p,2)
for(k in 1:p){
lm.result <- lm(y~x[,1:k])
y.hat <- predict(lm.result)
y.test.hat <- cbind(1,x.test[,1:k]) %*% coef(lm.result)
MSE[k,1] <- mean((y-y.hat)^2)
MSE[k,2] <- mean((y.test-y.test.hat)^2)
}
plot(MSE[,1],col=1,ylim = range(MSE))
points(MSE[,2],col=2)
points(which.min(MSE[,2]),min(MSE[,2]),col=3,cex=2)
abline(v=which.min(MSE[,2]))
plot(MSE[,1],col=1,ylim = range(MSE))
plot(MSE[,1],col=1,ylim = range(MSE))
plot(MSE[,1],col=1,ylim = range(MSE))
plot(MSE[,1],col=1,ylim = range(MSE))
points(MSE[,2],col=2)
points(which.min(MSE[,2]),min(MSE[,2]),col=3,cex=2)
MSE
which.min(MSE[,2])
###########################################################################
# subset selection
rm(list=ls(all=TRUE))
# read data
#prostate <- read.table("C:\\Users\\dyang\\Dropbox\\588\\HTF\\data\\prostate.data")
prostate
prostate
prostate <- read.table("D:/Dropbox/588/HTF/data/prostate.data")
prostate <- read.table("~/prostate.data.txt")
prostate <- read.table("~/Documents/Financial Data Mining/Sample code/prostate.data.txt")
# install.packages("leaps")
# to use function regsubsets
library(leaps)
install.packages("leaps")
# to use function regsubsets
library(leaps)
# check data
names(prostate)
# lpsa is the response
# the last column indicates training or test
dim(prostate)
plot(prostate)
# lpsa is the response
train <- subset( prostate, train )
test  <- subset( prostate, train==FALSE )
train
train <- train[,-10]
train
train[,-10]
train <- train[,-10]
test <- test[,-10]
x.train <- as.matrix(train[,-9])
View(x.train)
x.test <- as.matrix(test[,-9])
y.test <- test[,9]
dim(train)
dim(test)
# Best Subset Selection
regfit.full <- regsubsets(lpsa~.,train)
regfit.full
lpsa
summary(regfit.full)
lpsa~
รง
lpsa~.,train
lpsa~.
names(reg.summary)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
reg.summary
# If you were to do the subset selection by yourself
for(i in 1:8){
cat(i,(summary(lm(y.train~x.train[,i]))$sigma)^2*(nrow(train)-2),"\n")
}
x.train <- as.matrix(train[,-9])
y.train <- train[,9]
x.test <- as.matrix(test[,-9])
y.test <- test[,9]
dim(train)
dim(test)
# Best Subset Selection
regfit.full <- regsubsets(lpsa~.,train)
summary(regfit.full)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
# If you were to do the subset selection by yourself
for(i in 1:8){
cat(i,(summary(lm(y.train~x.train[,i]))$sigma)^2*(nrow(train)-2),"\n")
}
cat(i,(summary(lm(y.train~x.train[,i]))$sigma)^2*(nrow(train)-2),"\n")
}
for(i in 1:7){
for(j in (i+1):8){
cat(i,j,(summary(lm(y.train~x.train[,c(i,j)]))$sigma)^2*(nrow(train)-3),"\n")
}
}
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(which.max(reg.summary$adjr2),reg.summary$adjr2[which.max(reg.summary$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
points(which.min(reg.summary$cp),reg.summary$cp[which.min(reg.summary$cp)],col="red",cex=2,pch=20)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
which.min(reg.summary$bic)
points(which.min(reg.summary$bic),reg.summary$bic[which.min(reg.summary$bic)],col="red",cex=2,pch=20)
c
windows()
quartz()
quartz()
par(mfrow=c(2,2))
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
# find coefficient
coef(regfit.full,6)
quartz()
par(mfrow=c(2,2))
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
regfit.fwd<-regsubsets(lpsa~.,data=train,method="forward")
summary(regfit.fwd)
regfit.bwd<-regsubsets(lpsa~.,data=train,method="backward")
summary(regfit.bwd)
k=6
coef(regfit.full,k)
coef(regfit.fwd,k)
coef(regfit.bwd,k)
regfit.full
plot(regfit.full)
regfit.full$bic
regfit.full$rsq
